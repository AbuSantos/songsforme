datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PurchaseStatus {
  PENDING
  COMPLETE
  FAILED
  NONE
}

model User {
  id                        String             @id @default(cuid())
  username                  String?            @unique
  userId                    String             @unique
  listenTimeThreshold       Int
  accumulatedTime           Int                @default(0) // Aggregated total listening time for the user
  lastListeningTime         DateTime? // Last time the user listened
  listeningSessionStartTime DateTime? // The start time of the current listening session
  currentNftId              String? // Store the NFT ID for the current listening session
  nftListeningTimes         NFTListeningTime[]
}

model NFTListeningTime {
  id              String    @id @default(cuid())
  nftId           String // Foreign key to ListedNFT
  userId          String // Foreign key to User
  accumulatedTime Int       @default(0) // Time spent listening to this NFT
  nft             ListedNFT @relation(fields: [nftId], references: [id])
  user            User      @relation(fields: [userId], references: [userId])

  @@unique([nftId, userId])
}

model ListedNFT {
  id                String              @id @default(cuid())
  tokenId           String
  seller            String
  price             Float
  contractAddress   String
  uri               String?
  listedAt          DateTime            @default(now())
  sold              Boolean             @default(false)
  userId            String?
  playlist          Playlist[]
  PlaylistListedNFT PlaylistListedNFT[]
  Single            Single?             @relation(fields: [singleId], references: [id])
  singleId          String?
  purchases         BuyNFT[]
  accumulatedTime   Int?                @default(0)
  listeningSession  ListeningSession[]
  NFTListeningTime  NFTListeningTime[]
}

model ListeningSession {
  id        String     @id @default(cuid())
  userId    String?
  nft       ListedNFT? @relation(fields: [nftId], references: [id])
  nftId     String?
  startTime DateTime
  endTime   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Playlist {
  id                String              @id @default(cuid())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userId            String
  listednft         ListedNFT[]
  // owner             User                @relation(fields: [userId], references: [id])
  PlaylistListedNFT PlaylistListedNFT[]
}

model BuyNFT {
  id              String          @id @default(cuid())
  buyer           String // Wallet address of the buyer
  listedNftId     String
  listedNft       ListedNFT       @relation(fields: [listedNftId], references: [id]) // NFT being bought
  price           Float // Purchase price
  purchaseDate    DateTime        @default(now()) // Date of purchase
  transactionHash String? // Blockchain transaction hash, optional
  status          PurchaseStatus? @default(NONE)
  relisted        Boolean         @default(false)
}

model Single {
  id              String      @id @default(cuid())
  song_name       String?
  artist_name     String?
  song_cover      String?
  album_name      String?
  uri             String?
  owner           String
  contractAddress String?
  tokenId         String?
  listednftId     String?
  listedNft       ListedNFT[]
}

model PlaylistListedNFT {
  playlistId  String
  listedNFTId String
  playlist    Playlist  @relation(fields: [playlistId], references: [id])
  listedNFT   ListedNFT @relation(fields: [listedNFTId], references: [id])

  @@id([playlistId, listedNFTId])
}
